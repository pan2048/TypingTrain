<!doctype html>
<html>
  <head>
    <!-- Required meta tags -->
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">   
    <link rel="shortcut icon" href="/resource/img/logo.png">
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/smoothness/jquery-ui.css">
    <link rel="stylesheet" href="/resource/highlight/styles/vs2015.css">
    <link rel="stylesheet" href="/resource/custom.css">
    <title></title>
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-109032729-5"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'UA-109032729-5');
    </script>
  </head>
  <body>
    <header>
  <nav class="navbar bg-light bg-light">
    <a class="navbar-brand" href="/">
      <img src="/resource/img/logo.png" height="28"/>
      PLNET
    </a>
    <form id="search_form">
      <input type="text" id="search_text"/>
      <button type="submit" class="btn btn-primary" id="search_button">Search...</button>
    </form>
    <a class="btn btn-primary" href="/login" role="button">Login</a>
  </nav>
</header>

    <main><div class='container-fluid' id='dict_container'>
      <h1><span class='badge badge-primary'>nested class in Java</span></h1>
      <div class='container-fluid'>
          <pre id='word_content' style='white-space: pre-wrap;'>There are four of types of nested classes in Java:
* A member inner class is a class defined at the same level as instance variables. It is not static. Often, this is just referred to as an inner class without explicitly saying the type.
* A local inner class is defined within a method.
* An anonymous inner class is a special case of a local inner class that does not have a name.
* A static nested class is a static class that is defined at the same level as static variables.

&lt;b&gt;Type of nested classes&lt;/b&gt;
| |Member inner class|Local inner class|Anonymous inner class|static nested class|
|-----|-----|-----|-----|-----|
|Access modifiers allowed | public, protected, private, or default access | None. Already local to method. | None. Already local to statement. | public, protected, private, or default access | 
|Can extend any class and any number of interfaces | Yes | Yes| No—must have exactly one superclass or one interface | Yes |
|Can be abstract|Yes|Yes|N/A—because no class definition|Yes|
|Can be final|Yes|Yes|N/A—because no class definition|Yes|
|Can access instance members of enclosing class|Yes|Yes|Yes|No (not directly; requires an instance of the enclosing class)|
|Can access local variables of enclosing class|No|Yes—if final or effectively final|Yes—if final or effectively final|No|
|Can declare static methods|No|No|No|No|

A nested class is a member of its enclosing class. Non-static nested classes (inner classes) have access to other members of the enclosing class, even if they are declared private. Static nested classes do not have access to other members of the enclosing class.
```
class OuterClass {
    ...
    static class StaticNestedClass {
        ...
    }
    class InnerClass {
        ...
    }
}
```
Nested class is a way of logically grouping classes that are only used in one place: If a class is useful to only one other class, then it is logical to embed it in that class and keep the two together. Nesting such &quot;helper classes&quot; makes their package more streamlined. Nested classes are cool for hiding implementation details. It increases encapsulation: Consider two top-level classes, A and B, where B needs access to members of A that would otherwise be declared private. By hiding class B within class A; A&#039;s members can be declared private and B can access them. In addition, B itself can be hidden from the outside world. It can lead to more readable and maintainable code: Nesting small classes within top-level classes places the code closer to where it is used.
```
class List
{
    public:
        List(): head(nullptr), tail(nullptr) {}
    private:
        class Node
        {
              public:
                  int   data;
                  Node* next;
                  Node* prev;
        };
    private:
        Node*     head;
        Node*     tail;
};
```
</pre>
      </div>
      <div class='btn-group-vertical text-left'>
    <button type='button' class='btn btn-light'><b>Superconcept: </b><a href='/dictionary/Class_in_java'>Class in java</a>, <a href='/dictionary/Nested_class'>Nested class</a></button><button type='button' class='btn btn-light'><b>Subconcept: </b><a href='/dictionary/Inner_class_in_java'>Inner class in java</a>, <a href='/dictionary/Static_nested_class_in_java'>Static nested class in java</a></button>
      </div><br/>
    <div class='container-fluid'>  <a class='btn btn-primary' href="/" role='button'>Home</a>  <a class='btn btn-primary' data-href="/action/edit/nested_class_in_Java" href='placeholder' id='word_edit' role='button'>Edit</a></div></div></main>
    <footer>
    <script>
        document.getElementById("year").innerHTML = new Date().getFullYear();
    </script>
    <div class="text-center text-primary">  
	    <a href="/">plnet.com 2018 - 
            <script>
                var CurrentYear = new Date().getFullYear()
                document.write(CurrentYear)
            </script>
        </a>
	</div> 
</footer> 

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    <script src='https://www.google.com/recaptcha/api.js'></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mermaid/8.2.3/mermaid.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/showdown/1.9.0/showdown.min.js'></script>
    <script src="/resource/highlight/highlight.pack.js"></script>
    <script src="/client/src/app/main.js" type="module"></script>
  </body>
</html>
